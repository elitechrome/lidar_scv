// Generated by gencpp from file clothoid_msgs/clothoid_CAN.msg
// DO NOT EDIT!


#ifndef CLOTHOID_MSGS_MESSAGE_CLOTHOID_CAN_H
#define CLOTHOID_MSGS_MESSAGE_CLOTHOID_CAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace clothoid_msgs
{
template <class ContainerAllocator>
struct clothoid_CAN_
{
  typedef clothoid_CAN_<ContainerAllocator> Type;

  clothoid_CAN_()
    : header()
    , Gway_Wheel_Velocity_FR(0.0)
    , Gway_Wheel_Velocity_RL(0.0)
    , Gway_Wheel_Velocity_RR(0.0)
    , Gway_Wheel_Velocity_FL(0.0)
    , Gway_Lateral_Accel_Speed(0.0)
    , Gway_Parking_Brake_Active(false)
    , Gway_AirConditioner_On(false)
    , Gway_Steering_Angle(0.0)
    , Gway_Steering_Speed(0.0)
    , Gway_Steering_Tq(0.0)
    , Gway_Accel_Pedal_Position(0.0)
    , Gway_Brake_Active(0)
    , Gway_BrakeMasterCylinder_Pressure(0.0)
    , Gway_Engine_Speed(0.0)
    , Gway_Gear_Target_Change(0)
    , Gway_GearSelDisp(0)
    , Gway_Throttle_Position(0.0)
    , Gway_Cluster_Odometer(0.0)
    , Gway_Longitudinal_Accel_Speed(0.0)
    , Gway_Vehicle_Speed_Engine(0)
    , Gway_Yaw_Rate_Sensor(0.0)  {
    }
  clothoid_CAN_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Gway_Wheel_Velocity_FR(0.0)
    , Gway_Wheel_Velocity_RL(0.0)
    , Gway_Wheel_Velocity_RR(0.0)
    , Gway_Wheel_Velocity_FL(0.0)
    , Gway_Lateral_Accel_Speed(0.0)
    , Gway_Parking_Brake_Active(false)
    , Gway_AirConditioner_On(false)
    , Gway_Steering_Angle(0.0)
    , Gway_Steering_Speed(0.0)
    , Gway_Steering_Tq(0.0)
    , Gway_Accel_Pedal_Position(0.0)
    , Gway_Brake_Active(0)
    , Gway_BrakeMasterCylinder_Pressure(0.0)
    , Gway_Engine_Speed(0.0)
    , Gway_Gear_Target_Change(0)
    , Gway_GearSelDisp(0)
    , Gway_Throttle_Position(0.0)
    , Gway_Cluster_Odometer(0.0)
    , Gway_Longitudinal_Accel_Speed(0.0)
    , Gway_Vehicle_Speed_Engine(0)
    , Gway_Yaw_Rate_Sensor(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Gway_Wheel_Velocity_FR_type;
  _Gway_Wheel_Velocity_FR_type Gway_Wheel_Velocity_FR;

   typedef double _Gway_Wheel_Velocity_RL_type;
  _Gway_Wheel_Velocity_RL_type Gway_Wheel_Velocity_RL;

   typedef double _Gway_Wheel_Velocity_RR_type;
  _Gway_Wheel_Velocity_RR_type Gway_Wheel_Velocity_RR;

   typedef double _Gway_Wheel_Velocity_FL_type;
  _Gway_Wheel_Velocity_FL_type Gway_Wheel_Velocity_FL;

   typedef double _Gway_Lateral_Accel_Speed_type;
  _Gway_Lateral_Accel_Speed_type Gway_Lateral_Accel_Speed;

   typedef uint8_t _Gway_Parking_Brake_Active_type;
  _Gway_Parking_Brake_Active_type Gway_Parking_Brake_Active;

   typedef uint8_t _Gway_AirConditioner_On_type;
  _Gway_AirConditioner_On_type Gway_AirConditioner_On;

   typedef double _Gway_Steering_Angle_type;
  _Gway_Steering_Angle_type Gway_Steering_Angle;

   typedef double _Gway_Steering_Speed_type;
  _Gway_Steering_Speed_type Gway_Steering_Speed;

   typedef double _Gway_Steering_Tq_type;
  _Gway_Steering_Tq_type Gway_Steering_Tq;

   typedef double _Gway_Accel_Pedal_Position_type;
  _Gway_Accel_Pedal_Position_type Gway_Accel_Pedal_Position;

   typedef int8_t _Gway_Brake_Active_type;
  _Gway_Brake_Active_type Gway_Brake_Active;

   typedef double _Gway_BrakeMasterCylinder_Pressure_type;
  _Gway_BrakeMasterCylinder_Pressure_type Gway_BrakeMasterCylinder_Pressure;

   typedef double _Gway_Engine_Speed_type;
  _Gway_Engine_Speed_type Gway_Engine_Speed;

   typedef int8_t _Gway_Gear_Target_Change_type;
  _Gway_Gear_Target_Change_type Gway_Gear_Target_Change;

   typedef int8_t _Gway_GearSelDisp_type;
  _Gway_GearSelDisp_type Gway_GearSelDisp;

   typedef double _Gway_Throttle_Position_type;
  _Gway_Throttle_Position_type Gway_Throttle_Position;

   typedef double _Gway_Cluster_Odometer_type;
  _Gway_Cluster_Odometer_type Gway_Cluster_Odometer;

   typedef double _Gway_Longitudinal_Accel_Speed_type;
  _Gway_Longitudinal_Accel_Speed_type Gway_Longitudinal_Accel_Speed;

   typedef int8_t _Gway_Vehicle_Speed_Engine_type;
  _Gway_Vehicle_Speed_Engine_type Gway_Vehicle_Speed_Engine;

   typedef double _Gway_Yaw_Rate_Sensor_type;
  _Gway_Yaw_Rate_Sensor_type Gway_Yaw_Rate_Sensor;




  typedef boost::shared_ptr< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> const> ConstPtr;

}; // struct clothoid_CAN_

typedef ::clothoid_msgs::clothoid_CAN_<std::allocator<void> > clothoid_CAN;

typedef boost::shared_ptr< ::clothoid_msgs::clothoid_CAN > clothoid_CANPtr;
typedef boost::shared_ptr< ::clothoid_msgs::clothoid_CAN const> clothoid_CANConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace clothoid_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'clothoid_msgs': ['/home/scv/clothoid_ws/src/clothoid_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf79876cf64f714b58eb45e29aa12076";
  }

  static const char* value(const ::clothoid_msgs::clothoid_CAN_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf79876cf64f714bULL;
  static const uint64_t static_value2 = 0x58eb45e29aa12076ULL;
};

template<class ContainerAllocator>
struct DataType< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clothoid_msgs/clothoid_CAN";
  }

  static const char* value(const ::clothoid_msgs::clothoid_CAN_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Chassis-Status\n\
Header header\n\
float64 Gway_Wheel_Velocity_FR\n\
float64 Gway_Wheel_Velocity_RL\n\
float64 Gway_Wheel_Velocity_RR\n\
float64 Gway_Wheel_Velocity_FL\n\
float64 Gway_Lateral_Accel_Speed\n\
bool Gway_Parking_Brake_Active\n\
bool Gway_AirConditioner_On\n\
float64 Gway_Steering_Angle\n\
float64 Gway_Steering_Speed\n\
float64 Gway_Steering_Tq\n\
float64 Gway_Accel_Pedal_Position\n\
int8 Gway_Brake_Active\n\
float64 Gway_BrakeMasterCylinder_Pressure\n\
float64 Gway_Engine_Speed\n\
int8 Gway_Gear_Target_Change\n\
int8 Gway_GearSelDisp\n\
float64 Gway_Throttle_Position\n\
float64 Gway_Cluster_Odometer\n\
float64 Gway_Longitudinal_Accel_Speed\n\
int8 Gway_Vehicle_Speed_Engine\n\
float64 Gway_Yaw_Rate_Sensor\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::clothoid_msgs::clothoid_CAN_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Gway_Wheel_Velocity_FR);
      stream.next(m.Gway_Wheel_Velocity_RL);
      stream.next(m.Gway_Wheel_Velocity_RR);
      stream.next(m.Gway_Wheel_Velocity_FL);
      stream.next(m.Gway_Lateral_Accel_Speed);
      stream.next(m.Gway_Parking_Brake_Active);
      stream.next(m.Gway_AirConditioner_On);
      stream.next(m.Gway_Steering_Angle);
      stream.next(m.Gway_Steering_Speed);
      stream.next(m.Gway_Steering_Tq);
      stream.next(m.Gway_Accel_Pedal_Position);
      stream.next(m.Gway_Brake_Active);
      stream.next(m.Gway_BrakeMasterCylinder_Pressure);
      stream.next(m.Gway_Engine_Speed);
      stream.next(m.Gway_Gear_Target_Change);
      stream.next(m.Gway_GearSelDisp);
      stream.next(m.Gway_Throttle_Position);
      stream.next(m.Gway_Cluster_Odometer);
      stream.next(m.Gway_Longitudinal_Accel_Speed);
      stream.next(m.Gway_Vehicle_Speed_Engine);
      stream.next(m.Gway_Yaw_Rate_Sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct clothoid_CAN_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clothoid_msgs::clothoid_CAN_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clothoid_msgs::clothoid_CAN_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Gway_Wheel_Velocity_FR: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Wheel_Velocity_FR);
    s << indent << "Gway_Wheel_Velocity_RL: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Wheel_Velocity_RL);
    s << indent << "Gway_Wheel_Velocity_RR: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Wheel_Velocity_RR);
    s << indent << "Gway_Wheel_Velocity_FL: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Wheel_Velocity_FL);
    s << indent << "Gway_Lateral_Accel_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Lateral_Accel_Speed);
    s << indent << "Gway_Parking_Brake_Active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Gway_Parking_Brake_Active);
    s << indent << "Gway_AirConditioner_On: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Gway_AirConditioner_On);
    s << indent << "Gway_Steering_Angle: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Steering_Angle);
    s << indent << "Gway_Steering_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Steering_Speed);
    s << indent << "Gway_Steering_Tq: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Steering_Tq);
    s << indent << "Gway_Accel_Pedal_Position: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Accel_Pedal_Position);
    s << indent << "Gway_Brake_Active: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Gway_Brake_Active);
    s << indent << "Gway_BrakeMasterCylinder_Pressure: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_BrakeMasterCylinder_Pressure);
    s << indent << "Gway_Engine_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Engine_Speed);
    s << indent << "Gway_Gear_Target_Change: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Gway_Gear_Target_Change);
    s << indent << "Gway_GearSelDisp: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Gway_GearSelDisp);
    s << indent << "Gway_Throttle_Position: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Throttle_Position);
    s << indent << "Gway_Cluster_Odometer: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Cluster_Odometer);
    s << indent << "Gway_Longitudinal_Accel_Speed: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Longitudinal_Accel_Speed);
    s << indent << "Gway_Vehicle_Speed_Engine: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Gway_Vehicle_Speed_Engine);
    s << indent << "Gway_Yaw_Rate_Sensor: ";
    Printer<double>::stream(s, indent + "  ", v.Gway_Yaw_Rate_Sensor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOTHOID_MSGS_MESSAGE_CLOTHOID_CAN_H
