// Generated by gencpp from file clothoid_msgs/lidar_msgs.msg
// DO NOT EDIT!


#ifndef CLOTHOID_MSGS_MESSAGE_LIDAR_MSGS_H
#define CLOTHOID_MSGS_MESSAGE_LIDAR_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace clothoid_msgs
{
template <class ContainerAllocator>
struct lidar_msgs_
{
  typedef lidar_msgs_<ContainerAllocator> Type;

  lidar_msgs_()
    : header()
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_head(0.0)
    , pos_cov()
    , road_boundary_1_x(0.0)
    , road_boundary_1_y(0.0)
    , road_boundary_2_x(0.0)
    , road_boundary_2_y(0.0)  {
      pos_cov.assign(0.0);
  }
  lidar_msgs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_head(0.0)
    , pos_cov()
    , road_boundary_1_x(0.0)
    , road_boundary_1_y(0.0)
    , road_boundary_2_x(0.0)
    , road_boundary_2_y(0.0)  {
  (void)_alloc;
      pos_cov.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _pos_x_type;
  _pos_x_type pos_x;

   typedef double _pos_y_type;
  _pos_y_type pos_y;

   typedef double _pos_head_type;
  _pos_head_type pos_head;

   typedef boost::array<double, 9>  _pos_cov_type;
  _pos_cov_type pos_cov;

   typedef double _road_boundary_1_x_type;
  _road_boundary_1_x_type road_boundary_1_x;

   typedef double _road_boundary_1_y_type;
  _road_boundary_1_y_type road_boundary_1_y;

   typedef double _road_boundary_2_x_type;
  _road_boundary_2_x_type road_boundary_2_x;

   typedef double _road_boundary_2_y_type;
  _road_boundary_2_y_type road_boundary_2_y;




  typedef boost::shared_ptr< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct lidar_msgs_

typedef ::clothoid_msgs::lidar_msgs_<std::allocator<void> > lidar_msgs;

typedef boost::shared_ptr< ::clothoid_msgs::lidar_msgs > lidar_msgsPtr;
typedef boost::shared_ptr< ::clothoid_msgs::lidar_msgs const> lidar_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clothoid_msgs::lidar_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace clothoid_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'clothoid_msgs': ['/home/scv/clothoid_ws/src/clothoid_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e81b170af8aecf6f637a6be9c892375c";
  }

  static const char* value(const ::clothoid_msgs::lidar_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe81b170af8aecf6fULL;
  static const uint64_t static_value2 = 0x637a6be9c892375cULL;
};

template<class ContainerAllocator>
struct DataType< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clothoid_msgs/lidar_msgs";
  }

  static const char* value(const ::clothoid_msgs::lidar_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Lidar_scanmatching pose\n\
Header header\n\
float64 pos_x\n\
float64 pos_y\n\
float64 pos_head\n\
float64[9] pos_cov\n\
float64 road_boundary_1_x\n\
float64 road_boundary_1_y\n\
float64 road_boundary_2_x\n\
float64 road_boundary_2_y\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::clothoid_msgs::lidar_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_head);
      stream.next(m.pos_cov);
      stream.next(m.road_boundary_1_x);
      stream.next(m.road_boundary_1_y);
      stream.next(m.road_boundary_2_x);
      stream.next(m.road_boundary_2_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lidar_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clothoid_msgs::lidar_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clothoid_msgs::lidar_msgs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos_x: ";
    Printer<double>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<double>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_head: ";
    Printer<double>::stream(s, indent + "  ", v.pos_head);
    s << indent << "pos_cov[]" << std::endl;
    for (size_t i = 0; i < v.pos_cov.size(); ++i)
    {
      s << indent << "  pos_cov[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pos_cov[i]);
    }
    s << indent << "road_boundary_1_x: ";
    Printer<double>::stream(s, indent + "  ", v.road_boundary_1_x);
    s << indent << "road_boundary_1_y: ";
    Printer<double>::stream(s, indent + "  ", v.road_boundary_1_y);
    s << indent << "road_boundary_2_x: ";
    Printer<double>::stream(s, indent + "  ", v.road_boundary_2_x);
    s << indent << "road_boundary_2_y: ";
    Printer<double>::stream(s, indent + "  ", v.road_boundary_2_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOTHOID_MSGS_MESSAGE_LIDAR_MSGS_H
