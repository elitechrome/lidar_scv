// Generated by gencpp from file clothoid_msgs/novatel_msgs.msg
// DO NOT EDIT!


#ifndef CLOTHOID_MSGS_MESSAGE_NOVATEL_MSGS_H
#define CLOTHOID_MSGS_MESSAGE_NOVATEL_MSGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace clothoid_msgs
{
template <class ContainerAllocator>
struct novatel_msgs_
{
  typedef novatel_msgs_<ContainerAllocator> Type;

  novatel_msgs_()
    : header()
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , hor_spd(0.0)
    , trk_gnd(0.0)
    , vert_spd(0.0)
    , gdop(0.0)
    , pdop(0.0)
    , hdop(0.0)  {
    }
  novatel_msgs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , hor_spd(0.0)
    , trk_gnd(0.0)
    , vert_spd(0.0)
    , gdop(0.0)
    , pdop(0.0)
    , hdop(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _height_type;
  _height_type height;

   typedef double _hor_spd_type;
  _hor_spd_type hor_spd;

   typedef double _trk_gnd_type;
  _trk_gnd_type trk_gnd;

   typedef double _vert_spd_type;
  _vert_spd_type vert_spd;

   typedef float _gdop_type;
  _gdop_type gdop;

   typedef float _pdop_type;
  _pdop_type pdop;

   typedef float _hdop_type;
  _hdop_type hdop;




  typedef boost::shared_ptr< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct novatel_msgs_

typedef ::clothoid_msgs::novatel_msgs_<std::allocator<void> > novatel_msgs;

typedef boost::shared_ptr< ::clothoid_msgs::novatel_msgs > novatel_msgsPtr;
typedef boost::shared_ptr< ::clothoid_msgs::novatel_msgs const> novatel_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clothoid_msgs::novatel_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace clothoid_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'clothoid_msgs': ['/home/scv/clothoid_ws/src/clothoid_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a9d38c66338edd488bea9ba2de093d3";
  }

  static const char* value(const ::clothoid_msgs::novatel_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a9d38c66338edd4ULL;
  static const uint64_t static_value2 = 0x88bea9ba2de093d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clothoid_msgs/novatel_msgs";
  }

  static const char* value(const ::clothoid_msgs::novatel_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#NOVATEL_MSGS\n\
Header header\n\
float64 lon\n\
float64 lat\n\
float64 height\n\
float64 hor_spd\n\
float64 trk_gnd\n\
float64 vert_spd\n\
float32 gdop\n\
float32 pdop\n\
float32 hdop\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::clothoid_msgs::novatel_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.height);
      stream.next(m.hor_spd);
      stream.next(m.trk_gnd);
      stream.next(m.vert_spd);
      stream.next(m.gdop);
      stream.next(m.pdop);
      stream.next(m.hdop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct novatel_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clothoid_msgs::novatel_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clothoid_msgs::novatel_msgs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "hor_spd: ";
    Printer<double>::stream(s, indent + "  ", v.hor_spd);
    s << indent << "trk_gnd: ";
    Printer<double>::stream(s, indent + "  ", v.trk_gnd);
    s << indent << "vert_spd: ";
    Printer<double>::stream(s, indent + "  ", v.vert_spd);
    s << indent << "gdop: ";
    Printer<float>::stream(s, indent + "  ", v.gdop);
    s << indent << "pdop: ";
    Printer<float>::stream(s, indent + "  ", v.pdop);
    s << indent << "hdop: ";
    Printer<float>::stream(s, indent + "  ", v.hdop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLOTHOID_MSGS_MESSAGE_NOVATEL_MSGS_H
